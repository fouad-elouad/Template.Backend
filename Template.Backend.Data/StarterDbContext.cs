using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using System.Reflection;
using Template.Backend.Data.Utilities;
using Template.Backend.Model;
using Template.Backend.Model.Audit;
using Template.Backend.Model.Audit.Entities;
using Template.Backend.Model.Entities;
using Template.Backend.Model.Enums;

namespace Template.Backend.Data
{
    public class StarterDbContext : DbContext
    {
        private readonly AuditSaveChangesInterceptor _auditDbCommandInterceptor;
        private readonly ICurrentUserService _currentUserService;
        private readonly IDateTime _dateTime;

        // Audit
        public static Dictionary<Type, Type> _auditTypesMapping = new();

        public StarterDbContext(DbContextOptions<StarterDbContext> options,
            AuditSaveChangesInterceptor auditDbCommandInterceptor,
            ICurrentUserService currentUserService,
            IDateTime dateTime) : base(options)
        {
            _auditDbCommandInterceptor = auditDbCommandInterceptor;
            _currentUserService = currentUserService;
            _dateTime = dateTime;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.AddInterceptors(_auditDbCommandInterceptor);

        /// <summary>
        /// Initializes the <see cref="StarterDBContext"/> class.
        /// </summary>
        static StarterDbContext()
        {
            MapAuditEntities();
        }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Department> Department { get; set; }

        // Audit
        public DbSet<CompanyAudit> CompanyAudit { get; set; }
        public DbSet<EmployeeAudit> EmployeeAudit { get; set; }
        public DbSet<DepartmentAudit> DepartmentAudit { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());

            base.OnModelCreating(modelBuilder);
        }

        /// <summary>
        /// Sets the specified entity state as modified.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void SetModified(object entity)
        {
            Entry(entity).State = EntityState.Modified;
        }

        /// <summary>
        /// Determines whether the specified entity is detached.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>
        ///   <c>true</c> if the specified entity is detached; otherwise, <c>false</c>.
        /// </returns>
        public bool IsDetached(object entity)
        {
            return Entry(entity).State == EntityState.Detached;
        }

        /// <summary>
        /// Audit operations and SaveChanges
        /// </summary>
        public int Commit()
        {
            return this.SaveChanges();
        }

        /// <summary>
        /// Audit operations and asynchronous SaveChanges
        /// </summary>
        public async Task<int> CommitAsync()
        {
            return await this.SaveChangesAsync();
        }

        /// <summary>
        /// Audit operations and asynchronous SaveChanges
        /// </summary>
        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            // Audit Added entities after saveChanges for using autoGenerated id from database in audit table
            var addedEntities = GetAddedEntities();
            base.SaveChangesAsync();
            AuditAddedEntites(addedEntities);
            return base.SaveChangesAsync();
        }

        /// <summary>
        /// Audit operations and SaveChanges
        /// </summary>
        public override int SaveChanges()
        {
            // Audit Added entities after saveChanges for using autoGenerated id from database in audit table
            var addedEntities = GetAddedEntities();
            base.SaveChanges();
            AuditAddedEntites(addedEntities);
            return base.SaveChanges();
        }

        private void AuditAddedEntites(IEnumerable<EntityEntry<IEntity>> AddedEntites)
        {
            DateTime createdOn = _dateTime.Now;

            foreach (var entry in AddedEntites)
            {
                var entityType = entry.Entity.GetType();
                if (_auditTypesMapping.ContainsKey(entityType))
                {
                    Type auditType = _auditTypesMapping[entityType];
                    var auditProperties = auditType.GetProperties();
                    EntityEntry<IAuditEntity> auditEntityEntry = this.GetEntityEntry<IAuditEntity>(auditType);

                    var entityProperties = entry.CurrentValues.Properties.Select(p => p.Name).ToList();

                    foreach (var property in auditProperties)
                    {
                        if (entityProperties.Contains(property.Name))
                        {
                            auditEntityEntry.Property(property.Name).CurrentValue = entry.Property(property.Name).CurrentValue;
                        }
                    }
                    auditEntityEntry.Entity.AuditOperation = AuditOperations.INSERT;
                    auditEntityEntry.Entity.CreatedDate = entry.Entity.CreatedOn;
                    auditEntityEntry.Entity.LoggedUserName = _currentUserService.UserId;
                }
            }
        }

        public IEnumerable<EntityEntry<IEntity>> GetAddedEntities()
        {
            // Audit Added entities after saveChanges for using autoGenerated id from database in audit table
            var addedEntities = ChangeTracker.Entries<IEntity>().Where(e => e.State == EntityState.Added).ToList();
            var now = _dateTime.Now;
            foreach (var entry in addedEntities)
            {
                entry.Entity.RowVersion = 1;
                entry.Entity.CreatedOn = now;
            }
            return addedEntities;
        }

        public static void MapAuditEntities()
        {
            _auditTypesMapping.TryAdd(typeof(Company), typeof(CompanyAudit));
            _auditTypesMapping.TryAdd(typeof(Employee), typeof(EmployeeAudit));
            _auditTypesMapping.TryAdd(typeof(Department), typeof(DepartmentAudit));
        }
    }

    public static class ContextExtensions
    {
        /// <summary>
        /// get DbEntityEntry instance from Type
        /// </summary>
        /// <param name="auditType">Type</param>
        /// <returns></returns>
        public static EntityEntry<T> GetEntityEntry<T>(this DbContext dbContext, Type auditType) where T : class
        {
            var auditTypeInstance = (T) Activator.CreateInstance(auditType)!;
            return dbContext.Add<T>(auditTypeInstance);
        }
    }
}